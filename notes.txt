// Aula 1

Interfaces do express ficam em outra dependência. Caso tentemos usar qualquer método
de app aparecerá um warning.
Fizemos (yarn add @types/express -D) para instalar. Além disso, foi instalada como
dependência de desenvolvimento (-D), pois ela não será necessária em produção.

Essa sintaxe de importação não é entendida pelo Node.
Foi necessário instalar o TS (yarn add typescript -D) e também inicializá-lo dentro
da aplicação (yarn tsc --init). Esse último comando cria um arquivo tsconfig.json com algumas
configurações mutáveis do TS.

Por fim, adicionamos a dependẽncia que converte o código TS para JS (yarn add ts-node-dev -D) em tempo
de execução, de modo que não precisamos ficar fazendo a transpilação toda hora.
Também foi criado uma regra no package.json para rodá-lo em ambiente de desenvolvimento (scripts dev).
--transpile-only: não checa erros de tipagem em ambiente de dev, o própŕio VSCode já serve.
--ignore-watch node_modules: ignora tudo o que estiver ocorrendo no node_modules.

// Escuta requisições GET para a rota /users.
app.get('/users')

É possível utilizar as mesmas rotas (nesse caso, /users) desde que os métodos HTTP sejam diferentes.

Para mockar e receber as requisições foi utilizado o Isomnia (é bastante semelhante ao Postman).
https://insomnia.rest/download/.
Cria um novo workspace e define no Base Environment uma "baseURL". Dessa forma não é necessário ficar digitando https://localhost:3333 toda hora.


// Aula 2

Vamos utilizar o PostgreSQL como banco de dados.
A parte ruim de baixar o driver nativo do banco é que o código fica preso à sintaxe do driver.
Caso seja necessário mudar de banco, é preciso reescrever boa parte do código que interage com ele.

knew.js é um query builder para os diversos tipos de banco. Através dele conseguimos abstrair a Interface de cada driver.

TypeORM (object relational mapping) é um cara que faz o mapeamento entre objetos. Também é adaptável em relação ao banco de dados usado (driver).
Trabalha com classes/objetos e já mapeia isso para o banco de dados. Conseguimos evitar de trabalhar com o SQL puro, porém pode ser que às vezes seja necessário.

Para ambiente de desenvolvimento utilizaremos o SQLite, pois ele acaba sendo mais leve por salvar as coisas em memória. Obviamente isso não será usado em produção.

O TypeORM precisa de um arquivo de configuração (ormconfig.json).
A propriedade "database" nesse arquivo é caminho do arquivo onde ficarão as informações sobre o BD.
No database/index.ts criamos a conexão do banco de dados e também a importamos no src/index.ts. Ao rodar o projeto o arquivo database.sqlite será criado automaticamente.

migration: como se fosse um histórico de tudo o que estamos fazendo em relação ao banco de dados.
Permite que todas as pessoas consigam saber o que houve com cada tabela. Toda a estrutura de uma tabela fica dentro da migration.
Toda vez que eu pegar um projeto de alguém e rodá-lo, o banco de dados vai verificar se existe uma migration nova e ele irá rodar para sincronizar todas as alterações que ele não tem ainda.

Dentro do nosso projeto criamos um comando para rodar as migrations no package.json (chamamos de "typeorm"). O próprio TypeORM possui uma cli que podemos usar. Para que não precisássemos instalar de maneira global, vamos utilizar o arquivo cli.js que está na node_modules.

Para criar uma migration basta fazer (yarn typeorm migration: create -n <nome da migration>).
Também adicionamos no ormconfig.json a regra de criação das migrations (em cli.migrationsDir).

Realizamos a criação da tabela de usuário através da migration CreateUsers. Nela definimos o schema da tabela.
O método up é executado na criação da migration e o down é quando queremos remover a migration sendo executada.

Para rodar a migration basta fazer (yarn typeorm migration:run).
Antes disso, precisamos especificar no ormconfig.json qual é a pasta em que estão as migrations a serem rodadas (fazemos isso na propriedade "migrations").

Para verificar o BD criado podemos usar uma extensão do VSCode ou o Beekeeper Studio.

Para reverter a última (e apenas ela) migration executada basta rodar o comando (yarn typeorm migration:revert).

Controllers: é um controlador. A ideia é que toda parte de regras de negócio que deixa o arquivo server.ts poluído vá para a pasta controllers.
Teremos um controller para cada funcionalidade sendo desenvolvida no sistema. O server será responsável por chamar o controller.

Além de criarmos os controllers também vamos dividir os serviços das rotas para ficar mais organizado ainda.
Feito no arquivo routes.ts. Após isso, importamos no server.ts o arquivo com as rotas.
Fazemos app.use(routes) no arquivo server.ts. Esse método é um middleware.

Para que o server consiga entender o JSON precisamos usar outro middleware antes da linha app.use(routes). Isso faz com que ele olhe nas requisições de contenham content-type application/json e já realize o parse do request.body.

Na pasta models criamos as nossas classes que serão mapeadas para tabelas no banco de dados pelo TypeORM.
Para sinalizarmos que uma dada classe deve virar uma tabela, utilizamos o decorator @Entity('users').
Precisamos habilitar o uso dos decorators no tsconfig.json.
Descomentamos as linhas das propriedades experimentalDecorators, emitDecoratorMetadata e strictPropertyInitialization (sendo que esse último alteramos o valor para false).

Podemos deixar o próprio banco gerenciar o ID ou podemos criar via código. Dependendo do banco utilizado pode ser um pouco problemático, por conta disso faremos via código. Adicionamos a dependência uuid para isso (yarn add uuid).

No arquivo UserControllers.ts criamos um repositório de usuários para termos acesso a alguns métodos disponíveis no TypeORM.
O repositório tem diversos métodos que podemos usar em cima de uma tabela em banco de dados.
repositório: é um gerenciador de entidade. Permite que façamos algumas ações dentro do banco de dados: inserções, criação de tabela, edição de atributos etc.
Toda comunicação com o banco será feita através de repositórios. Cada entidade terá um repositório para ela.


// Aula 3

Vamos refatorar os controllers.
Precisamos criar um repositório para nosso usuário. Vamos isolar a parte de criação da tabela e interação com o banco de dentro do UserController, pois não é interessante que essa responsabilidade fique com ele.
Atualmente isso é feito usando o método getRepository do próprio TypeORM.
Para isso, criamos a pasta repositories.

O repositório UsersRepository ficará responsável pelo acesso ao banco. Ele será uma classe que herdará (extends Repository<User>, em que <User> deve corresponder a alguma entidade que criamos anteriormente) os diversos métodos do TypeORM que usamos dentro do controller. Dessa maneira, também conseguimos realizar algumas personalizações.
Precisamos colocar uma anotação indicando que essa classe será um repositório. Fazemos isso com @EntityRepository(User).

No arquivo UserController bastou alterar a chamada de getRepository(User) para getCustomRepository(UsersRepository) que tudo volta a funcionar normalmente.

"alt + shift + O" remove os imports não utilizados.

Criamos uma tabela para guardar as pesquisas realizadas.
Para isso, criamos também a migration para essa tabela. (yarn typeorm migration:create -n CreateSurveys).
O nome da migration não tem uma regra específica, podemos usar o que acharmos melhor.
Em seguida, criamos o nosso model de pesquisa em models/Survey.ts.
Também criamos o repository dela em repositories/SurveysRepositories.ts.
E, por fim, o controller. Nele também criamos o método show que retorna todas as surveys que estão no banco.


> Testes

Aqui no back-end faremos testes unitários e de integração. Não é feito o end to end.

Utilizaremos o JEST para realizar os testes. yarn add jest -D e yarn add @types/jest -D.
Para inicializar o arquivo de configuração do jest fazemos yarn jest --init.
No arquivo de configuração do jest (jest.config.ts) colocamos bail: true, comentamos testEnvironment e habilitamos testMatch alterando o local onde os testes ficarão salvos.

Adicionamos mais um dependência de desenvolvimento para o jest. É um preset para trabalhar com TypeScript dentro dos testes (yarn add ts-jest -D).
No arquivo de configuração do jest alteramos a linha preset para preset: 'ts-jest'.

Jest não é bom para fazer testes de integração, pois temos que simular um outro sistema.
Para isso vamos usar um pacote chamado supertest (yarn add supertest @types/supertest -D).
Ele não precisa de nenhuma configuração.

Vamos separar toda a parte do app do arquivo server.ts e nesse último deixaremos apenas o instaciamento do servidor. Dessa maneira conseguimos usar o app sem precisar subir o servidor.

Precisamos criar um banco de dados para fazer testes em desenvolvimento. Esse banco deve ser separado do banco de produção, pois podemos fazer caquinha nas tabelas do banco em produção caso rodemos algum teste lá.
Para isso modificamos a chamada de createConnection no database/index.ts. Utilizaremos uma variável de ambiente para definir em qual ambiente estamos (produção/teste).
No arquivo package.json alteramos scripts/test e inserimos a variável de ambiente "NODE_ENV=test".

No arquivo database/index.ts vamos verificar se estamos em produção ou teste e, caso estejamos em produção, vamos alterar a configuração que vem por padrão do arquivo ormconfig.json a fim de apontar um outro caminho para o banco de dados.

Para acessar alguma variável de ambiente dentro do node basta fazer process.env.<nome da variável>.

Por fim, em app.ts importamos o arquivo database/index.ts a função que realiza a conexão com o banco.

No arquivo __tests__/User.test.ts instanciamos nosso banco e rodamos as migrations antes de realizar os testes. Fazemos isso pois caso as migrations não sejam rodadas, não teremos tabelas para trabalhar.

Precisamos remover o banco de dados de teste após cada teste rodado, pois caso contrário o teste de criaçao de um novo usuário dará erro (já que ele existe no banco).
Para isso utilizamos a diretiva "posttest" nos scripts do package.json. Especificamos que iremos remover o arquivo com o banco de dados de teste.


// Aula 4

Começaremos criando uma migration para a tabela que conterá os dados dos usuários, da pesquisa e a nota que o usuário deu.
Essa tabela conterá 2 chaves estrangeiras (id da pesquisa e id do usuário).
É importante que a coluna value (que é o valor de resposta do usuário à pesquisa) possa ser Null (ou nullable), pois no momento da inserção da linha na tabela esse dado ainda não existe, pois o usuário não respondeu a pergunta.

Precisamos falar pro banco de dados que a coluna user_id e surver_id da tabela surveys_users vêm de alguma outra tabela (chave estrangeira). Fazemos isso através da propriedade foreignKeys dentro de new Table({}).
Também inserimos as trativas para quando as chaves estrangeiras são deletadas ou atualizadas na tabela de origem. Definimos que na tabela surveys_users as chaves estrangeiras devem sofrer cascateamento.

Após a criação da migration vamos criar o model para a tabela SurveysUsers.
Também criamos o repositório para ela.

Por fim, no controller decidimos não nomeá-lo como SurveysUsersController.ts, pois esse nome não ficaria tão intuitivo já que a responsabilidade dele é enviar um email. Sendo assim, o chamamos de SendMailController.ts.

No controller nós verificamos se o email do usuário e se o id da pesquisa estão presentes em suas respectivas tabelas no banco.
Em caso negativo, retormos erro. Do contrário, procedemos com o salvamento da pesquisa na tabela SurveysUsers e enviamos o email para o usuário.

Também criamos a rota (/sendmail) no arquivo routes.ts para receber as chamadas.

Vamos utilizar a biblioteca Nodemailer (yarn add nodemailer) para realizar o envio de email. Como ele é um pacote que contém tipagem também aproveitamos para instalar como dependência de desenvolvimento (yarn add @types/nodemailer -D).
Além disso, também precisamos de um SMTP Server que é quem realmente fará o envio do email para nós. Para isso utilizaremos o Ethereal https://ethereal.email/ que é um serviço falso de SMTP.

Para que o SendMailController não fique inchado com a responsabilidade de enviar o email, criamos uma pasta chamada "services" que conterá o código responsável por criar, enviar e manipular o email.

Precisaremos usar o transporter criado no constructor de SendMailService também em outros métodos. Para isso criamos o atributo privado client.

Por fim, no método execute fazemos o envio do email.

Também exportamos como "export default new SendMailService()", pois isso já cria automaticamente a instância e a retorna quando for importado em outro arquivo (em SendMailController.ts).

Para fazer a customização do HTML do email usaremos o Handlebars (yarn add handlebars).

Criamos a pasta src/views para armazenar tudo o que estiver relacionado à parte visual da aplicação. Nela colocaremos o template HTML do email de NPS (npsMail.hbs - .hbs é a extensão para o handlebars).
As variáveis dentro desse arquivo são utilizadas com {{variavel aqui}}.

Agora precisaremos definir de onde vêm as variáveis utilizada no arquivo do template de email. Faremos isso no SendMailService.
Importamos o path do próprio pacote do node para ele fazer a leitura do caminho do arquivo sem precisar especificar de forma manual (através do resolve), trabalhamos apenas utilizando a estrutura de pastas do projeto.

__dirname pega o caminho exato de onde está a aplicação.

Usando o módulo fs do próprio node lemos o arquivo que contém o template do email.
Em seguida, usamos handlebars.compile() para compilar o conteúdo do arquivo template em um "objeto" do handlebars.
Por fim, passamos para esse objeto o contexto do template. Ou seja, passamos os valores das variáveis ({{variável aqui}}) utilizadas dentro do template.
Também alteramos o argumento html de this.client.sendMail para ser a variável html contendo o template parseado, que antes era a survey.description.

Para que o método execute de SendMailService seja genérico, adicionamos o parâmetro path, que deverá conter o path do template a ser utilizado.

Também alteramos o método execute para receber do SendMailController as variáveis que popularão o template.

Nos links do template que contém as notas a ideia é colocarmos algo do tipo: baseurl/answers/${nota}?u={id do usuário}.
Em que u é um token para sabermos qual é o usuário que está votando.

Para definir a variável {{link}} dentro do SendMailController utilizaremos uma variável de ambiente do node, pois é muito mais cômodo do que deixar hardcoded/chumbado.
Criamos um arquivo (.env) que conterá as variáveis de ambiente na pasta raiz da aplicação.

Editamos o arquivo SendMailController para ele não permitir que seja criado mais de um registro na tabela caso o usuário já esteja lá (controlado por { user_id: user.id }) OU não tenha respondido a pesquisa ainda (controlado por { value: null }). Nesse caso, enviamos novamente o email para ele.
<<Fizemos a correção desse OU na Aula 5>>

> Relacionamentos entre tabelas
A tabela surveys_users (models/SurveysUsers.ts) é chamada de tabela pivô, pois é uma tabela que possui relacionamento com outras tabelas.

Vamos definir nessa tabela quais são os relacionamentos entre elas (1:1, 1:N, N:M etc.).
Faremos isso através de annotations nas colunas. Definimos uma nova propriedade em SurveysUsers cujo nome é "user" e "survey". Para essas duas definimos as anotações ManyToOne (indica o relacionamento dessa coluna) e JoinColumn (indica qual é a coluna que ele deve referenciar).

Ao realizarmos a busca usando findOne, podemos passar o atributo "relations" que indica qual é a entidade que queremos fazer a relação. Ele é um array com os nomes dessa entidades (nomes das tabelas).
Isso faz com que a busca já traga o objeto completo encontrado nessas tabelas que especificamos o nome. Em nosso caso é o objeto do usuário e da pesquisa.


// Aula 5

Começamos refatorando a busca dentro da tabela SurveysUsers em SendMailController pois o "where" fazia um OR em vez de um AND.
Alteramos -> where: [{ user_id: user.id }, { value: null }]
Para -> where: { user_id: user.id, survey_id: survey.id, value: null }

Também precisaremos alterar o link das notas no email. Atualmente é passado como token (query u) o user_id. Entretanto, é possível que um mesmo user_id tenha diversas pesquisas atreladas a ele e por conta disso não saberíamos qual é a pesquisa em que ele votou.
Temos 2 alternativas: usar tanto o user_id e o surver_id como query; usar o surverUser. Optamos pelo segundo pois é mais sucinto.

Vamos agora criar o controller que tratará da resposta do usuário.
Chamamos de AnswerController.ts.
No arquivo de rotas para esse controller extraíremos a nota e o surveyUserId da própria URL de chamada. O primeiro é o route param e o segundo é um query param.
Tudo isso será processado pelo método execute.

Em seguida, vamos para a criação do controller que irá tratar do cálculo do NPS.
Fizemos isso no NpsController.

A lógica do NPS é a seguinte:
  - Notas de 0 a 10
  - Detratores: 0 - 6
  - Passivos: 7 - 8
  - Promotores: 9 - 10
Os Passivos são excluídos da conta, eles não importam. Só fazemos o cálculo com Detratores e Promotores.
Fórmula: (nº de promotores - º de detratores) / (nº de correspondentes - aqui entra os passivos também) x 100

Na busca pelas entradas no banco relativas a uma survey precisamos utilizar value: Not(IsNull()) para que não sejam trazidas linhas que ainda não tiveram resposta do usuário.
Esses métodos Not() e IsNull() são do próprio TypeORM.

Para finalizar, vamos implementar algumas validações simples na aplicação usando a biblioteca yup (yarn add yup). Site: https://github.com/jquense/yup.
Basicamente validamos se o que é recebido pelas requests está no formato esperado ou possui o dado esperado.
Fizemos essas validações em no model User.

Removemos a diretiva "posttest" do package.json pois ela roda apenas em Unix e é necessário que consigamos rodar a aplicação numa gama maior de sistemas.
Nos testes inserimos a diretiva afterAll(), na qual dropamos a base de dados usando os métodos do próprio TypeORM.

Para não dar conflito na hora de realizar os testes por conta de termos feito essa alteração precisamos colocar a flag -i na diretiva "test" do package.json. A flag faz com que os testes rodem de maneira serial (e não de maneira paralela como é o comum).
Isso foi necessário para não dar conflito na hora de criar as migrations e tudo mais relacionado ao banco.

Também vamos melhorar a forma como os controllers retornam os erros. Faremos isso através o arquivo src/errors/AppError.ts.
Criaremos erros customizados e quem ficará responsável por retornar os erros será o app.ts
A ideia é que em todo ponto de código onde retornamos o status 400, nós lançemos uma exceção (throw new AppError).
Essa exceção vai subindo até chegar em alguém (algum código) que realize o tratamento delas.
Para tratar a exceção no app.ts utilizaremos um middleware (middleware é tudo aquilo que está no meio do caminho entre a requisição e a resposta).
Lá verificamos se o erro é uma instância de AppError. Em caso afirmativo, tratamos a resposta do jeito que já estávamos fazendo (status 400 e mensagem de erro). Caso contrário, provavelmente é um erro de servidor e retornamos um status 500 com a mensagem.

Para tudo isso funcionar é necessário instalar a biblioteca express-async-errors (yarn add express-async-errors) e importá-la logo abaixo do express no app.ts